1. Setting up multiplayer (a basic one) is as easy as clicking the arrow next to "play" in the unreal editor and selecting the number of players in the level/game/map.
Note that as of unreal 4.25, you need to set the net mode as "play as listen server". See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7761712#overview

2. Use source tree (free!) to run version control on unreal engine programs https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7761712#overview time 10:20.

3. Synchronus means "together at the same time" such as mmo's, persistent worlds, and most fps first person shooter games. Turn based games like chess played through
email are Asynchronus because you take turns and there is time lag and you each take "turns" playing.

4. Each player "state" is updated when you receive inputs from every other player in the game/network. That means the slowest connection speed is the weakest link
in this state. It's very insecure and slow. A central authority server fixes this and prevents obvious cheating. See 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7764312#overview time 3:00

5. Servers can execute code because it HasAuthority or has server authority as opposed to clients. See 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7778522#questions/8885998 and notice that the server can have the cube move while the client doesn't.

6. To have the server replicate actors or other things to clients and ONLY the server, use set replicates:
void AMovingPlatform::BeginPlay()
{
	Super::BeginPlay();

	SetReplicates(true);
	SetReplicateMovement(true);
}
See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7778978#questions/8885998 time 7:10

7. Authority and replication https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7778978#questions/8885998 what happens if client can update positions but
the server does not, despite server being authoritative( always right). Time 10:00

8. Since server is always right, if server and client disagree, the client will see the server's real position of items and actors to it's actual original location on
the server. This would explain why objects or people "snap" back into the actual position. Server is always right! See video in #7, timestamp 15:00.

9. If you need to add or edit a target location for an object or actor (but not move the object itself), use gizmo fvector widgets
Code:
UPROPERTY(EditAnywhere, Meta = (MakeEditWidget = true))
	FVector TargetLocation;
	
See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7806128#questions/8885998 Time 2:00

10. Note that from #9, when using a target location that can be moved independent of the actor itself, the location is RELATIVE to the actor. It is NOT world / absolute
relative.

11. Revisiting vectors and explanations on how to calculate them https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7806128#questions/8885998 Time 6:00

12. Calculating vectors from point a to b https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7806128#questions/8885998 time 8:00
		FVector Direction = (TargetLocation - Location).GetSafeNormal(); // for not modifying the vector in place
		//FVector Direction = (TargetLocation - Location).Normalize(); will modify the vector in place that is being calculated upon.
		no protection against problems if dealing with very small numbers (precise numbers?)	

13. When calculating vectors from point a to b, it's:
Location += XSpeed * DeltaTime * Direction;

instead of:
Location += FVector(XSpeed * DeltaTime, 0, 0);

14. Sometimes you just want to convert your local target position to world position and not modify its direction or anywhere else.
		FVector GlobalTargetLocation = GetTransform().TransformPosition(TargetLocation); //does just that vs.
				FVector GlobalTargetLocation = GetTransform().TransformVector(TargetLocation); // will affect the scaling of the vector and direction
See https://github.com/bastilar/coding-reference/edit/master/unrealengine/MultiplayerCodingTips time 13:00

15. When swapping variables, you need to create a temporary variable to store the original values before swapping and setting them equal to new values.
see https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7814240#questions time 12:30 where we swap Globaltargetlocation and globalstartlocation.

16. Explanations of how the basic internet works and using NATs https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7824036#questions

17. Creating components in c++ uses "Defaultsubobject" method. See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7816380#questions time 2:35.

18. Sometimes if the blueprints derived from c++ doesn't work, try deleting it and recreating it.

19. Using game instances in unreal engine https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7828834#questions

20. Console commands https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7829432#questions

21. Logging messages to game screen instead of console https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7829432#questions time 6:00 using Getengine
GEngine commands.

22. Join servers online multiplayer using servertravel / server travel https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7830362#questions

23. Joining servers online multiplayer using clienttravel / client travel https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7857576#questions

24. Network compendium regarding details of unreal engine's networking infrastructure ane tips
https://cedric-neukirchen.net/Downloads/Compendium/UE4_Network_Compendium_by_Cedric_eXi_Neukirchen.pdf

25. Creating menu blueprints for multiplayer https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865470#questions

26. Using fclass or fclassfinder to find blueprint classes in c++ https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865940#questions time 1:40

27. Fclass / fclassfinder help constructors need to be called in the function constructors or else you get errors. See
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865940#questions time 5:30

28. You may need to regenerate or create / add new dependencies / dependency in the build.cs or .ini files such as UMG. See
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865940#questions time 10:30

29. Unreal engine doesn't like hyphens -'s in their project names. Avoid using them for naming .uproject files.

30. Creating clickable buttons that do stuff in c++ https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7866354#questions

31. Using container widgets to make the main menu UMG work better https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882290#questions

32. Buttons in UMG can only accept 1 child. Not sure if this is persistent in later unreal engine versions.

33. Using overlays and images to create nice looking menus in UMG https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882290#questions/15517460 time 11:00
Also how to get around the image covering all your ui elements like menu buttons.

34. Lowering the tint value can make the image look darker if it's too bright or overwhelming your UI elements.
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882724#questions/15517460 time 4:00

35. Custom button images pictures and fonts / font changes https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882724#questions/15517460 in UMG

36. To import fonts, simply download and drag and drop the .tff file (font file) into the content browser of unreal. A good idea to create a seperate folder for
fonts. Get tons of great free fonts from font.google.com

37. Connecting UMG to c++ https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7885312#questions/15517460

38. Binding widget and c++ to UMG https://benui.ca/unreal/ui-bindwidget/

39. When binding a widget automatically through c++ to a UMG object like a button, the names must match exactly from c++ to the object name in your umg. If you
create a host button and use the name "Host" the button name in UMG must also exactly say "Host". See
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7885312#questions/15517460 time 7:30-8:00 +

40. Binding c++ to a host button https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7890162#questions/15517460 ubutton / ubuttons

41. How to create a seperate menu system plugin that cna be used across different games https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460
aka using dependencies or invert /inverted dependencies dependency

42. 2 types of dependencies exist, compile time dependencies that go one direction, and runtime dependencies that go both directions
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460 time 2:00 dependency

43. Interfaces are what is used to bridge main menu dependencies with game intsances https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460
time 3:00 
Main menu calls and inherits from the interface and the game instance calls and inherits from the interface. Then the main menu can refer to the game instance afterwards
via the interface since the interface is being shared between them all.

44. How to create an unreal interface https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460 time 5:30

45. The first class that is created by default in UInterface is UINTERFACE minimal api
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460 time 6:30 
This is done so that unreal can figure out where to inherit from 1 time and not cause "diamond inheritance" where you have a constant cycle of inheriting from other
classes and causing a weird loop. Interface functions are implemented in the second function as shown by default IMenuInterface

46. In order to call a function that is not implemented in our interface but rather have the game instance call its own implementation, you create a pure virtual void
function https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460 time 9:15 where you tell c++ to override its default behavior to look
for an implementation of a function. Example code:

public:
	virtual void Host() = 0;

47. Injecting the dependencies or dependency you created https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911624#questions/15517460

48. Implementing interface menus and dependencies and what happens when you don't fully implement a method or call function that doesn't exist within your interface
or called upon game instances/classes https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911624#questions/15517460 time 5:00

49. Deactivating the menu to allow us control of our characters again after joining a server. Probably have to do this after a player hits the "queue" button to remove
their menu ui and allow them to retake control of their characters https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7915790#questions/15517460

50. Using submenus and menu switchers to create toggles between menus https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7916890#questions/15517460
We use these instead of creating new menus to replace the old one because I guess it's less "heavy", whatever that means. Widget switcher

51. Editable text box actually refers to "text box" widget in unreal engine 4.26, NOT EDITABLE TEXT. This will clear up any weird "text box internal compile blueprint
errors. Example:

	UPROPERTY(meta = (BindWidget))
	class UEditableTextBox* IPAddressField;

52. When joining a server or host (maybe a queue even) how to make sure that player has control of their character again
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7928862#questions/15517460 time 16:30

53. Adding a main menu to your playable level https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7928906#questions/15517460 like pressing escape key and
having a menu show / pop up like in just about every video game out there.

54. Protected: can be a good substituted for private: if you get compile errors stating "no access to private member variables" or something similar
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7928906#questions/15517460 time 16:40.

55. In case you need to call a non ufunction within a ufunction, the workaround is to create a local method that you call. That local method then calls the super class
ufunction method you need https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7947920#questions/15517460 time 5:50

56. Introduction to steam multiplayer sdk / software development kit https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8063205#questions/15517460

57. Epic games has unreal engine use an online sub system or online sub menu subsystem to help integrate unreal with steamworks sdk or other likely sdks of a similar
function.

58. Adding the unreal engine online sub system module to your .build.cs file project 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8094624#questions/14480662 time 5:50

59. IOnlineSubsystem::Get is a useful singleton method for accessing and calling get methods on a particular online subsystem you want and don't need to worry about
creating constructors for it https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8094624#questions/14480662 time 7:40

60. The unreal engine online subsystem is actually an INTERFACE and implements a default "Null" subsystem so you can test things or not crash your engine
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8094648#questions

61. Auto can be used to auto declare a variable type if you have no idea what variable type you are declaring is
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8094648#questions time 6:30
Likely a good idea not to auto everything as it will make code hard to read AND result in a performance drop/hit
Auto is obviously very good for figuring out variable type syntaxes.

62. Shared pointers require apparently use of .IsValid() instead of the == or != when checking ot see if it's equal to something or null
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8094648#questions time 11:00 near end of video

63. Memory stack re explained. https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8099224#questions The important part is as function calls complete
and "return" from whatever it is doing, it CLEARS the memory stack frame, which probably frees up memory and enhances performance.

64. Memory cleaning very important because you don't want memory leaks like in badly made games
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8099224#questions Time 4:00 This can be avoided by cleaning and clearing pointers in memory
otherwise you have memory leakage and therefore system halting lag.

65. Memory reference counting https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8099224#questions time 4:25

66. Reference counting apparently sucks, use garbage collection as an alternate memory method fix instead
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8099224#questions time 7:00

67. Unreal online subsystem plugin interfaces use tsharedpointers / t shared pointers because you want to be able to use a reference set of pointers instead of
uobjects. Garbage collection deletes all unused objects and that could easily compromise the online subsystem objects, which we obviously don't want.
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8099224#questions time 10:00

68. Note garbage collection of memory cleaning is automatically enabled in unreal engine, so be careful when using UObjects on things that may need to hang by itself.
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8099224#questions time 11:25

69. Creating online sessions in c++ with session interfaces https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8111592#questions
Includes are #include "OnlineSessionSettings.h"
#include "Interfaces/OnlineSessionInterface.h"

70. Shared references and finding online sessions https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8112478#questions
Shared references, like references, cannot be null

71. Shared references using the new keyword can't just be set equal to something. YOu need to wrap it in a MakeShareable / Make Shareable function method 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8112478#questions time 5:30
SessionSearch = MakeShareable(new FOnlineSessionSearch());
SessionInterface->FindSessions(0, SessionSearch);

72. Modifying session server settings https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8112498#questions

73. SessionSettings.bShouldAdvertise = true; // make server publicly visible otherwise set to private game
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8112498#questions time 3:00

74. Show ping to server https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8112498#questions time 8:20

75. Don't forget the asterisk * if you're calling for the result of an FString!
	UE_LOG(LogTemp, Warning, TEXT("Current server sessions: %s"), *SearchResult.GetSessionIdStr());
	
76. Listing text blocks and widgets with an unreal engine scroll box https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8114238#questions
useful for any scrolling box and server browser listing.

77. Binding .cpp code to blueprint widgets refresher https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8114238#questions time 12:30

78. "no default constructor exists for class "UUserWidget" don't forgeto add Super method to tie a function to a parent class, sometimes a weird forgetting bug
UMainMenu::UMainMenu(const FObjectInitializer & ObjectInitializer) : Super (ObjectInitializer)

79. Clearing server list children text objects https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8127486#questions/3531198 time 11:00
	ServerList->ClearChildren(); // considered simple
	
80. https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8127486#questions/3531198 time 15:00 getting a server list and then adding their names to the 
actual server browser using tarrays / arrays.

81. Selecting servers from the browser list using T optional / toptional / t optionals 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8135668#questions/3531198

82. Enabling steam subsystem plugin in unreal engine plugin https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8157686#questions/5745599

83. Sample DefaultEngine.ini settings to append at end of file:
[/Script/Engine.GameEngine]
+NetDriverDefinitions=(DefName="GameNetDriver",DriverClassName="OnlineSubsystemSteam.SteamNetDriver",DriverClassNameFallback="OnlineSubsystemUtils.IpNetDriver")

[OnlineSubsystem]
DefaultPlatformService=Steam

[OnlineSubsystemSteam]
bEnabled=true
SteamDevAppId=480

[/Script/OnlineSubsystemSteam.SteamNetDriver]
NetConnectionClassName="OnlineSubsystemSteam.SteamNetConnection"

Note SteamDevAppId=480 is spacewars, the only openly available free app for steam. You need to replace 480 with your own app id that you paid the $100 fee for

84. Using presence in unreal engine to create or enable steam lobbies https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8158550#questions

85. SessionSearch->MaxSearchResults = 100; //fixes bug where your own game doesn't show up when hosting your own server
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8158550#questions time 11:00
Also note that the server CANNOT show up if you are both server host and client on the same exact computer. This appears to be a steam defined limited, probably to
avoid weird glitches and bugs.

86. Row selection in lists https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8164906#questions/3531198
How to make hover select, color change look nice when browser the server list

87. Short circuit operators explained https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8164906#questions/3531198 time 12:45
void UMainMenu::UpdateChildren()
{
	for (int32 i = 0; i < ServerList->GetChildrenCount(); ++i)
	{
		auto Row = Cast<UServerRow>(ServerList->GetChildAt(i));
		if (Row != nullptr)
		{
			Row->Selected = (SelectedIndex.IsSet() && SelectedIndex.GetValue() == i);
		}
	}
}

88. Instead of using if statements, you can use a condensed version of the it by using the "short circuit" method mentioned above in #87. In an and && situation
if one item is false, starting from the left, the whole thing is false and will return out quickly. Or's || probably require all false for the return early.

89. End result should be 4 conditions of hovered and pre selected rows, nice visual colors 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8164906#questions/3531198 time 15:00 near end

90. Creating struct / structs with USTRUCT() https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8165758#questions/3531198 time 5:30

91. Formatting server browser data so it reads nice and clean and doesn't overlap each other's text
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8168798#questions/3531198

92. How to remove overlapping text block text in unreal engine umg ui editor https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8168798#questions/3531198
time 6:15 but use the option clipping -> clipping set to bounds

93. In case a variable is not showing up in unreal umg details and there's no checkbox or field, check the source widget you're calling and make sure the instance
editable check box is checked and enabled. I'ts turned off by default as of ue 4.26.2

94. How to set custom server names settings in unreal engine https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8177044#questions/3531198 instead of using
its self generated long weird random names

95. Why you use super https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8180264#questions/3531198 time 0:50 seconds
Without super, the function calls the parent class without implementing your own override version of the same function method name

96. Use seamless travel as it prevents freezing on game clients when transitioning maps.
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8180264#questions/3531198 time 5:00
Unreal will load a small transition map and then while you're in that preloaded map your game client loads the actual next level big map and transition to that, 
giving the illusion of seamless travel.

97. Creating a load screen while transitioning https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8180264#questions/3531198 time 9:30

98. Prevent others from joining a server after the game has started https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8197740#questions/3531198
obviously useful after say, a queued match has begun.

99. Debugging the unreal engine for bugs https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8197740#questions/3531198

100. Using breakpoitns https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8197740#questions/3531198 time 8:00 Rider seems to have hte same functionality
just left click on the number code line and a red dot appears as of 8/16/2021

101. Starting and joining sessions after a game started then closing the game off to newcomers
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8200212#questions/3531198

102. Unreal engine acceleration and deceleration de-celeration of car https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8246344#questions/3531198
forces and movement

103. Blocking movement without using physics https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8246366#questions/3531198

104. bSweep is a parameter that checks to see if an object or actor is colliding with something
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8246366#questions/3531198 time 4:50

105. Rotation and quaternions https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8263368#questions/3531198 turning the car time 11:25

106. Simulating air resistance https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8264372#questions/3531198

107. Top speed on vehicles is caused by the square law in real life. The drag force becomes equal to the force your car or vehicle can produce and thus cannot
go any faster since drag is well, dragging your car behind as you try to go forward 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8264372#questions/3531198 time 2:50

108. AirResistance Air Resistance = -Speed^2 * DragCoefficient https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8264372#questions/3531198 time 5:20

109. A handy math tool for complex formulas in simple format https://www.wolframalpha.com/ wolfram alpha

110. Gravity force and rollign resistance in unreal engine https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8265754#questions/3531198

111. Turning circles and steering in vehicles https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8274656#questions/3531198

112. Server functions and cheat protection https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8286708#questions/3531198 multiplayer

113. RPCs in unreal engine explained remote procedure calls https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8286708#questions/3531198 time 3:45
UFUNCTION()
void ServerRPCFunction(); when called from client calls the body in the server for this function.

114. https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8286708#questions/3531198 reliable parameter explained 5:45
UFUNCTION(Server, Reliable, WithValidation) //reliable ensures that this gets called on the client or server since default is no reliable)
void Server_MoveForward(float Value);

WithValidation is required to ensure server security

115. https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8286708#questions/3531198 time 8:00
Server_MoveForward_Validate()
Server_MoveRight_Implementation();

116. Using return FMath::Abs(float Value) <= 1; or absolute value to return 1 and between -1 and 1 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8286708#questions/3531198 time 11:00

117. AutonomousProxy / autonomous proxy vs simulatedproxy / simulated proxy https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8298684#questions/3531198
How clients update each other and to server.

118. Simulated proxy is when clients attempt to figure out where objects and actors should be but derive ALL 100% data from the authority server.

119. Autonomous proxy is when clients also derive data from their own player controller / playercontroller and can update thigns slightly before the server does,
ensuring a smooth experience. I guess desync may occur when the server is returning or receiving different data compared to the client and then forces a rubberband
back onto the client once the updates flow back into the internet data stream.

120. Simulation server errors and why server desync occurs https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8497174#questions/3531198

121. Delta v and location rotation errors graphed https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8497174#questions/3531198 time 7:00
Small errors lead to large errors, just like space travel requires extremely precise, multiple decimals because the small errors compound very quickly over a large
enough time and value period. Error magnification

122. Ways to fix de sync and inconsistent rotation / location on the server https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8497174#questions/3531198 
time 9:30.
1. Synchonize velocity from the server but doesnt fix rotation desync errors
2. Overwrite location and rotation from the server but this can cause rubberbanding to the extreme because your client thinks I'm driving in the corner but server
says "Nope, you actually crashed into a river, here you go!"
3. Simulate with a fixed time step however it's very hard to implement but is also the best solution. This makes it so both client and server both have to deal with
the same server.

123. Overwrite location and rotation from server https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8507774#questions/3531198 method of removing desync
errors

124. As of unreal engine 4.24, you use #include "Net/UnrealNetwork.h" for the network include file

125. Triggering code on replication and smoothing out lag glitching https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8508254#questions/3531198

126. Smoothing out autonomous proxies further https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8547962#questions/3531198 by replicating velocity
and other data to the client from authority server. We also need to replicate transformation and rotation to depict accurate turning of objects, vehicles, and/or
actors.

127. To replicate a uproperty use:
UPROPERTY(Replicated)
float Throttle;

UPROPERTY(Replicated)
float SteeringThrow;

128. What is replication in unreal engine? Modern multiplayer experiences require synchronizing vast amounts of data between large numbers of clients spread
around the world. What data you send and how you send it is extremely important to providing a compelling experience to users since it can drastically affect how
your project performs and feels. In Unreal Engine, Replication is the name for the process of synchronizing data and procedure calls between clients and servers.
The Replication system provides a higher-level abstraction along with low-level customization to make it easier to deal with all the various situations you might
encounter when creating a project designed for multiple simultaneous users.
source https://docs.unrealengine.com/4.26/en-US/InteractiveExperiences/Networking/

129. What really is lag? https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8555696#questions/3531198

130. Packets and data sent over the internet overview, queues, and data overflow https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8555696#questions/3531198
and dropping packets due to jumbo packets or too much data. time 2:30

131. Reliable parameter in the RPC is in unreal engine makes sure that the packets that get dropped attempt to get resent over the network or internet
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8555696#questions/3531198 time 7:55. Without reliable specifier, the game engine won't bother trying
to get the data packets that were dropped. Not good.

132. Replaying autonomous moves to compensate for lag https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8574326#questions/3531198

133. Part 1 of the real way to sync client and server using the best method,
replicating structs https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8606996#questions/3531198

134. Part 2 simulating moves https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8608098#questions/3531198

135. Laying foundation for creating an unacknowledged queue / packet queue https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8608176#questions/3531198

136. Simulating unacknowledged moves https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8608370#questions/3531198 to smooth out the lag

137. Improving, smoothing, and fixing simulated proxy https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8668950#questions/3531198 even further beyond.

138. Remote roles in authority and autonomous proxy /  autonomous proxies https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8668950#questions/3531198
time 4:15 Note that in later versions of unreal, it is better ot use IsLocallyControlled() method instead of GetRemoteRole == ROLE_SimulatedProxy to avoid
server glitching and deprecation

139. Interpolating client's position interpolation https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8668950#questions/3531198 time 11:00

140. Refactoring tips https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8668972#questions/3531198

141. Extracting a movement component for refactoring https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8677116#questions/3531198

142. Attaching a c++ component to your refactored .cpp and .h header files https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8677116#questions/3531198
time 11:00 using CreateDefaultSuboject<nameofyourc++componentgoeshere>(TEXT("NameTheComponentYouWantToUseOftenTheSameObjectTypefoundInThe<>");

You can then go NameTheComponentYouWantEtc->callfunctionmethodnameofyourchoice();
You'll also need to create setters and getter functions that basically call and return themselves the values or parameters you're passing through.

.h will have:
void SetThrottle (float Val) { return Val; };

.cpp will have:
MovementComponent->SetThrottle(Value);

143. Components do not replicate by default and must be set to replicate in blueprints via the attached actor or object that contains said component
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8677300#questions/3531198 time 3:00

Also, the component must be UPROPERTY(VisibleAnywhere) instead of
UPROPERTY(EditAnywhere) because the unreal editor will show different options and not show replicate option check / tick box. Also, it is a pointer so you don't
want to edit the pointer where its pointing to or its contents, you just want to see what is inside it.

144. Inside the component that you want to default to replicate true, use SetIsReplcated(true); in your constructor
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8677300#questions/3531198 time 6:20

145. Linear Interpolation explained https://www.udemy.com/course/unrealmultiplayer/learn/lecture/8784088#questions/3531198 for client smoothing over internet network
play

146. 

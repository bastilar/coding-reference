1. Setting up multiplayer (a basic one) is as easy as clicking the arrow next to "play" in the unreal editor and selecting the number of players in the level/game/map.
Note that as of unreal 4.25, you need to set the net mode as "play as listen server". See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7761712#overview

2. Use source tree (free!) to run version control on unreal engine programs https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7761712#overview time 10:20.

3. Synchronus means "together at the same time" such as mmo's, persistent worlds, and most fps first person shooter games. Turn based games like chess played through
email are Asynchronus because you take turns and there is time lag and you each take "turns" playing.

4. Each player "state" is updated when you receive inputs from every other player in the game/network. That means the slowest connection speed is the weakest link
in this state. It's very insecure and slow. A central authority server fixes this and prevents obvious cheating. See 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7764312#overview time 3:00

5. Servers can execute code because it HasAuthority or has server authority as opposed to clients. See 
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7778522#questions/8885998 and notice that the server can have the cube move while the client doesn't.

6. To have the server replicate actors or other things to clients and ONLY the server, use set replicates:
void AMovingPlatform::BeginPlay()
{
	Super::BeginPlay();

	SetReplicates(true);
	SetReplicateMovement(true);
}
See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7778978#questions/8885998 time 7:10

7. Authority and replication https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7778978#questions/8885998 what happens if client can update positions but
the server does not, despite server being authoritative( always right). Time 10:00

8. Since server is always right, if server and client disagree, the client will see the server's real position of items and actors to it's actual original location on
the server. This would explain why objects or people "snap" back into the actual position. Server is always right! See video in #7, timestamp 15:00.

9. If you need to add or edit a target location for an object or actor (but not move the object itself), use gizmo fvector widgets
Code:
UPROPERTY(EditAnywhere, Meta = (MakeEditWidget = true))
	FVector TargetLocation;
	
See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7806128#questions/8885998 Time 2:00

10. Note that from #9, when using a target location that can be moved independent of the actor itself, the location is RELATIVE to the actor. It is NOT world / absolute
relative.

11. Revisiting vectors and explanations on how to calculate them https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7806128#questions/8885998 Time 6:00

12. Calculating vectors from point a to b https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7806128#questions/8885998 time 8:00
		FVector Direction = (TargetLocation - Location).GetSafeNormal(); // for not modifying the vector in place
		//FVector Direction = (TargetLocation - Location).Normalize(); will modify the vector in place that is being calculated upon.
		no protection against problems if dealing with very small numbers (precise numbers?)	

13. When calculating vectors from point a to b, it's:
Location += XSpeed * DeltaTime * Direction;

instead of:
Location += FVector(XSpeed * DeltaTime, 0, 0);

14. Sometimes you just want to convert your local target position to world position and not modify its direction or anywhere else.
		FVector GlobalTargetLocation = GetTransform().TransformPosition(TargetLocation); //does just that vs.
				FVector GlobalTargetLocation = GetTransform().TransformVector(TargetLocation); // will affect the scaling of the vector and direction
See https://github.com/bastilar/coding-reference/edit/master/unrealengine/MultiplayerCodingTips time 13:00

15. When swapping variables, you need to create a temporary variable to store the original values before swapping and setting them equal to new values.
see https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7814240#questions time 12:30 where we swap Globaltargetlocation and globalstartlocation.

16. Explanations of how the basic internet works and using NATs https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7824036#questions

17. Creating components in c++ uses "Defaultsubobject" method. See https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7816380#questions time 2:35.

18. Sometimes if the blueprints derived from c++ doesn't work, try deleting it and recreating it.

19. Using game instances in unreal engine https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7828834#questions

20. Console commands https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7829432#questions

21. Logging messages to game screen instead of console https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7829432#questions time 6:00 using Getengine
GEngine commands.

22. Join servers online multiplayer using servertravel / server travel https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7830362#questions

23. Joining servers online multiplayer using clienttravel / client travel https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7857576#questions

24. Network compendium regarding details of unreal engine's networking infrastructure ane tips
https://cedric-neukirchen.net/Downloads/Compendium/UE4_Network_Compendium_by_Cedric_eXi_Neukirchen.pdf

25. Creating menu blueprints for multiplayer https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865470#questions

26. Using fclass or fclassfinder to find blueprint classes in c++ https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865940#questions time 1:40

27. Fclass / fclassfinder help constructors need to be called in the function constructors or else you get errors. See
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865940#questions time 5:30

28. You may need to regenerate or create / add new dependencies / dependency in the build.cs or .ini files such as UMG. See
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7865940#questions time 10:30

29. Unreal engine doesn't like hyphens -'s in their project names. Avoid using them for naming .uproject files.

30. Creating clickable buttons that do stuff in c++ https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7866354#questions

31. Using container widgets to make the main menu UMG work better https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882290#questions

32. Buttons in UMG can only accept 1 child. Not sure if this is persistent in later unreal engine versions.

33. Using overlays and images to create nice looking menus in UMG https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882290#questions/15517460 time 11:00
Also how to get around the image covering all your ui elements like menu buttons.

34. Lowering the tint value can make the image look darker if it's too bright or overwhelming your UI elements.
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882724#questions/15517460 time 4:00

35. Custom button images pictures and fonts / font changes https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7882724#questions/15517460 in UMG

36. To import fonts, simply download and drag and drop the .tff file (font file) into the content browser of unreal. A good idea to create a seperate folder for
fonts. Get tons of great free fonts from font.google.com

37. Connecting UMG to c++ https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7885312#questions/15517460

38. Binding widget and c++ to UMG https://benui.ca/unreal/ui-bindwidget/

39. When binding a widget automatically through c++ to a UMG object like a button, the names must match exactly from c++ to the object name in your umg. If you
create a host button and use the name "Host" the button name in UMG must also exactly say "Host". See
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7885312#questions/15517460 time 7:30-8:00 +

40. Binding c++ to a host button https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7890162#questions/15517460 ubutton / ubuttons

41. How to create a seperate menu system plugin that cna be used across different games https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460
aka using dependencies or invert /inverted dependencies dependency

42. 2 types of dependencies exist, compile time dependencies that go one direction, and runtime dependencies that go both directions
https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460 time 2:00 dependency

43. Interfaces are what is used to bridge main menu dependencies with game intsances https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460
time 3:00 
Main menu calls and inherits from the interface and the game instance calls and inherits from the interface. Then the main menu can refer to the game instance afterwards
via the interface since the interface is being shared between them all.

44. How to create an unreal interface https://www.udemy.com/course/unrealmultiplayer/learn/lecture/7911678#questions/15517460 time 5:30

45. 

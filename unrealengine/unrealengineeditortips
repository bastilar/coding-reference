1. You can enable surface snapping on the editor. You can then drag any actor (object) to snap smoothly to any surface by
dragging its origin point, usually the yellow circle.

2. You may want to turn off surface rotate leaning because if you move a tree for example, it may lean as you drag it around the surface. That doesn't
make sense as trees are always upright, normally.

3. Turns out unreal engine has a bug where it won't compile your new code so you need to hit compile again. To be safe in the future, compile twice. I just had this
bug happen.

4. If you use GetOwner() make sure to remember that if you call it in beginplay() before the actor or object is actually instantiated, you may get a null return value
because it's calling the owner before the owner actually exists.

5. Objects that cast shadows and are moveable should have their mobility properties set to "moveable". Mobility is under "transform" in editor. Failure to do so
will result in shadows that are "left behind" and glitching the look.

6. Editanywhere, uproperty, and visibleanywhere tips https://forums.unrealengine.com/t/how-do-i-expose-a-variable-in-the-editor-and-make-in-editable/1665/6 cannot
use visible or edit in the same line as a rule.

7. Syntax for binding keys to code:
	InputComponent = GetOwner()->FindComponentByClass<UInputComponent>();
	if (InputComponent)
	{
		UE_LOG(LogTemp, Warning, TEXT("Input component found on %s"), *GetOwner()->GetName());
		InputComponent->BindAction("Grab", IE_Pressed, this, &UGrabber::Grab);
	}
	else
	{
		UE_LOG(LogTemp, Error, TEXT("No input component found on object %s"), *GetOwner()->GetName() );
	}
	void UGrabber::Grab()
{
	UE_LOG(LogTemp, Warning, TEXT("Test test grab form ugrabber pressed."));
}
	
Make sure InputComponent is declared in your .header .h header files and you also set the "Grab" in code equal EXACTLY to "Grab" in your unreal editor under:
Project Settings -> Engine -> Input

8. If you're using GetOverlappingActors, make sure the actors/objects that you will check for overlapping with has the tickbox "generate overlapping events" is ticked
yes.

9. When creating a new c++ class from a blueprint, there may be a new issue bug in unreal 4.26 where it cannot find the include. You have to go into the .cpp or .h
(most likely .cpp file) and look at the includes and just trim down the include to say #include "filename.h" instead of "directory/filename.h" easy bug fix.

Afterwards, close everything and start up the project again by clicking the .uproject file and clicking "yes" to rebuilding the project file structure.

10. When adjusting the camera and springarm, consider disabling the "do collision test" to prevent weird clipping or twitching errors in the camera.

11. When changing unreal engine blueprints around, if you're moving and changing inputs and it's not working, be sure to refresh each "node" by right clicking on the
problematic node and select "refresh node". This should also fix variable mismatches.

12. Unreal engine has a very good out of the box 3d sound system with automatic sound drop off and such. This is extremely useful for situations where you need to
hear enemy players based on their distance to you, like in csgo.

13. Unreal engine's 2d sounds are used for sounds whose volume probably won't change, such as leveling up sound, menu sounds, assigning skill point succcesses, etc.

14. Pawns are actors that can be possessed by the player. Characters are specialized pawns that inherits from the pawn class but can do a lot more things like move
or follow navmeshes (for ai). Character pawns are character like, obviously.

15. Might be a good idea to backup any map or level you're working on, and original bug free version and the map you're actually editing. That way if I mess up I can
go back to a previous reference and undo the damage.

16. When making a 3rd person camera, there are a few components you need, such as a camera childed to a spring arm component. See tutorial:
https://www.udemy.com/course/unrealcourse/learn/lecture/20587646#overview

17. An inverse transform vector is a fancy way of saying that vectors come in 2 flavors, local and global. Global is the world position so all objects revolve around
this "global" vector or position in the world when manipulating transforms. Local transforms are specific to the actor or object you're editing where the local actor
or object IS the center of attention when it comes to changing rotation, scaling, or transforms. Inverse transfor vectors means shifting from local to global and
vice versa.

18. To ensure smooth animations, if you tie character movement to the animations, you cannot go faster than the animation speed limit because there are no animations
to represent this faster speed. Hence, this causes a cap on gameplay. If you wish to go faster, you will need animations that will reflect this faster speed.

19. To calculate foot / feet / walk speed in your animations (to fix the foot sliding animation issue) you need to use the formula:
footspeed = (y_finishworldloc - y_startworldloc) / (time_finish - time_start)

20. BlueprintPure is called when the blueprint function isn't really changing; the result is always the same essentially. Generally blueprintpure functions also have
no execution pins.

21. Setting up AI nav meshes for ai bots to follow along a path: https://www.udemy.com/course/unrealcourse/learn/lecture/20628222#announcements

22. AI blackboards and ai behavior trees in unreal engine - artificial intelligence:
https://www.udemy.com/course/unrealcourse/learn/lecture/20628262#announcements

23. In blackboard behavior tree AI artificial intelligence, there can only be 1 root node.

24. Using bt (behavior trees) ai in blackboard unreal engine https://www.udemy.com/course/unrealcourse/learn/lecture/20628280#announcements with conditionals
and decorators.

25. When creating custom C++ btt tasks, there's a link error bug, you can resolve by looking for projectname.build.cs and add "GameplayTasks" see:
https://www.udemy.com/course/unrealcourse/learn/lecture/20628300#announcements timestamp 4:27 example line you're looking for is:

PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "GameplayTasks" });

This is a bug resulting from overriding the btt task function in unreal and for some reason unreal forgets to add the "GameplayTasks" parameter.

26. Be sure to check "Observe blackboard value" so that the node behavior will keep updating everytime the player or something else the bttask is changed. This will
make sure the ai, for example, keeps moving towards the target or player instead of going to a last known location then chasing you (which looks weird and unnatural).
see https://www.udemy.com/course/unrealcourse/learn/lecture/20628318#announcements

27. BTTservices tutorial https://www.udemy.com/course/unrealcourse/learn/lecture/20628352#announcements

28. Fixing weird bugs like shooting and hitting yourself or own gun, disabling collision when actor is dead (disabling collision models after actor died), and stopping
the shooting of an npc gun after he died https://www.udemy.com/course/unrealcourse/learn/lecture/20628404#announcements

29. Sound wave sound base unreal tutorial https://www.udemy.com/course/unrealcourse/learn/lecture/20648108#announcements important if you want to modify sound effects.

30. Sound spatialization tutorial sounds effects louder or quieter based on distance etc https://www.udemy.com/course/unrealcourse/learn/lecture/20648154#announcements

31. Aim offsets or getting your character mesh to move their arms up and down as you aim up or down using unreal engine blueprints tutorial
https://www.udemy.com/course/unrealcourse/learn/lecture/20648208#announcements

32. Animation state machines and complex state machines https://www.udemy.com/course/unrealcourse/learn/lecture/20648218#announcements and the one after.

33. Adding music and introduction text https://www.udemy.com/course/unrealcourse/learn/lecture/20648252#announcements

34. Levels are basically scenes from unity 3d.

35. 1 unreal unit is = 1 centimeter cm

36. You can break nodes manually and selectively in unreal blueprints by holding left alt key and left clicking on the node you wish to break.

37. When you place an input blueprint node, you can uncheck "consume input" so pressing say, the w key, will play all actions. Useful if you want to display
messages while doing an action and moving at the same time probably.

38. Getting and setting actor rotations using + and * operators in unreal blueprints https://www.udemy.com/course/unrealblueprint/learn/lecture/12396166#overview
A good way to fix odd behavior problems. This also goes over how to limit rotation values using math f clamps.

39. If selecting multiple objects and you want ot adjust the pivot point when rotating it later as a static mesh, find the center pivot point you want and select that
object/actor last https://www.udemy.com/course/unrealblueprint/learn/lecture/12454578#overview

40. Combining floats, text, and other strings to display a winning message tutorial https://www.udemy.com/course/unrealblueprint/learn/lecture/12454676#overview

41. To add comments on blueprint nodes, select all the nodes you want to place a comment on then press the "C" key.

42. Auto exposure can be turned off (it is on by default) so that lights will not dim or get brighter the further or closer away the source lighting is. See
https://www.udemy.com/course/unrealblueprint/learn/lecture/12960452#overview

43. Camera bobbing and follow the pawn (3rd person camera) tutorial: https://www.udemy.com/course/unrealblueprint/learn/lecture/13369792#overview Set world rotation
and set the pivot/center point of the camera spring arm to the dead center of the object or actor.

44. Using torque and other inputs to move your character or actor properly https://www.udemy.com/course/unrealblueprint/learn/lecture/13488102#overview this explains
how the torque is applied to axis or rotation, NOT the direction you're thinking of initially.

45. Magic numbers are numbers that used without an example or meaning of what they actually represent.

46. Can select any area and right click on it, then at the near bottom of the popup menu, select "play from here" so you don't have to play through the whole level to
test your level out https://www.udemy.com/course/unrealblueprint/learn/lecture/13637654#overview

47. Spring arms and cameras can collide with other platforms when you may not want it to, it is due to the collision setting, see https://www.udemy.com/course/unrealblueprint/learn/lecture/13637654#overview
for fix. Simply disable "collision test" in collision settings for the spring arm.

48. Using booleans, custom box trigger blueprints, and branches etc to detect player pawns or objects entering a certain area 
https://www.udemy.com/course/unrealblueprint/learn/lecture/13689856#overview

49. You can use breakpoints on branches to test your box trigger during simulated play. If triggered condition is met, it will immediatley jump to the breakpointed
node in your blueprint to let you know indeed your trigger volume is working, see https://www.udemy.com/course/unrealblueprint/learn/lecture/13689856#overview

50. Using player camera manager to fade out screen before restarting level (useful for flashbangs?)
https://www.udemy.com/course/unrealblueprint/learn/lecture/13698048#overview

51. The reason why the camera doesn't fade or execute is because the node is executing the rest of the code in the node, so nothing appears to happen. You have to add
a manual delay equal to your intended duration camera fade to get around this problem. See tutorial in #50.

52. Make literal float allows you to create a float variable in blueprints and assign it to whatever you want. NOt sure why this exists when you can juts craete 
variables at will on the left hand side of the blueprints tab.

53. Disable cast shadows under lighting in your blueprint actors if you are placing lights inside or around your objects/actors to avoid weird glitching see
https://www.udemy.com/course/unrealblueprint/learn/lecture/13731940#overview

54. Using unreal blueprint timelines to animate collision triggers or proximity events, such as getting near a pickup 
https://www.udemy.com/course/unrealblueprint/learn/lecture/13758058#overview

55. Lerp or linear interpolation explained https://www.udemy.com/course/unrealblueprint/learn/lecture/13758058#overview Alpha value returns a location based on a
number between 0 and 1 (alpha value).

Lerp is a location based vector function that returns a location between 2 points in the lerp function, usually between point A and B, such as You the player and
the target object you're heading towards.

56. Using multiple timelines to create dazzling effects on objects or actors, such as blinking and shrinking while gathering items/orbs
https://www.udemy.com/course/unrealblueprint/learn/lecture/13794248#overview

57. Using blueprint macros to create bp functions when there are multiple return execution pins
https://www.udemy.com/course/unrealblueprint/learn/lecture/13818052#overview continue me.

BP functions cannot have more than 1 execution pin, which makes including a function with say, branches that has 2 or more execution pins impossible. BP macros
work around this limitation and are very easy to implement.

58. Unreal blueprints projectiles for projectile movement component is in cm/s or centimeters per second see
https://www.udemy.com/course/unrealblueprint/learn/lecture/13833864#overview

59. Spawning actors and generating projectiles or anything similiar at runtime or when you want to:
https://www.udemy.com/course/unrealblueprint/learn/lecture/13890614#overview

60. The "other" in the event hit node blueprint is the actor that you're hitting, usually the wall or actor/player object see
https://www.udemy.com/course/unrealblueprint/learn/lecture/13990064#overview

61. If a newly created macro library does not appear in your blueprint search results, consider saving everything and restarting unreal. Hot reload glitch occurs
here too in unreal engine 4.26. Of course, make sure the macro library you're trying to call has scope.

62. Implementing win conditions by checkign for all actors of some type https://www.udemy.com/course/unrealblueprint/learn/lecture/14061395#overview

63. Blue and green color coded functions in unreal blueprints signify pure and impure functions see
https://www.udemy.com/course/unrealblueprint/learn/lecture/14076392#overview

64. When creating variables, click the "-" symbol next to the variable type in bp details and select the 9 squares for "array" to convert a single variable into
an array or other type of variable https://www.udemy.com/course/unrealblueprint/learn/lecture/14145009#learning-tools

65. Changing spring arm and camera views , might be useful if you want player to switch between first person, 3rd person camera, or rotate their perspective?
https://www.udemy.com/course/unrealblueprint/learn/lecture/14177527#learning-tools timestamp 3:08

66. Changing specific rules in each map using blueprint functions https://www.udemy.com/course/unrealblueprint/learn/lecture/14177527#learning-tools and calling
functions within green functions when you can't

67. If your spinning object is spinning too much, it may be because there is no or not enough damping effect on it. In other words, there needs to be air resistance
or friction applied ot simulated physics to remove or reduce the spinning see https://www.udemy.com/course/unrealblueprint/learn/lecture/14177527#learning-tools

68. Linear damping adds friction to x,y,z movement. Angular damping adds friction to x,y,z ROTATION.

69. Don't forget that some pre built levels also have a "world settings" attached to it, so make sure to change game mode or pawns there under "world settings" for
problem levels see https://www.udemy.com/course/unrealblueprint/learn/lecture/15016566#overview

70. Assigning and editing character meshes and materials https://www.udemy.com/course/unrealblueprint/learn/lecture/15016570#overview

71. Changing movement speed of character in blueprints https://www.udemy.com/course/unrealblueprint/learn/lecture/15051810#overview timestamp 6:05

72. Controllers always have a rotator called Control Rotation. Player controller / characters always match the yaw of this control rotation. See
https://www.udemy.com/course/unrealblueprint/learn/lecture/15090206#overview timestamp 2:40.

73. Rotating characters for aiming using a thumbstick gampepad or mouse https://www.udemy.com/course/unrealblueprint/learn/lecture/15090206#overview

74. If I can't see the direction the camera or anything is facing, look at the xyz on the lower left corner of the main viewport on the main editor screen. See
https://www.udemy.com/course/unrealblueprint/learn/lecture/15090206#overview 5:30-5:44.

75. Atan2 math function can convert floats or values into degrees https://www.udemy.com/course/unrealblueprint/learn/lecture/15090206#overview See timestamp
7:00.

76. Sometimes the atan2 function may invert your controls, consider switching the a and b a / b inputs to fix this quickly. See
https://www.udemy.com/course/unrealblueprint/learn/lecture/15090206#overview timestamp 8:25.

77. Using thumbstick deadzones to fix character snapping to a direction after using then releasing the thumbstick.
https://www.udemy.com/course/unrealblueprint/learn/lecture/15136126#overview

78. Mouse aiming and deadzone creation for mouse https://www.udemy.com/course/unrealblueprint/learn/lecture/15158828#overview

79. Attaching weapons or items to sockets https://www.udemy.com/course/unrealblueprint/learn/lecture/15173196#overview

80. Sounds Cues are audio blueprints for unreal engine https://www.udemy.com/course/unrealblueprint/learn/lecture/15186088#overview and editing the sfx

81. If you're looping sounds or sound cues, consider using "stop sound" or "stop" node in blueprints just to avoid any possible weird sound glitching. See #80.

82. Unreal Motion Graphics is unreal's hud manager and menu creation system. See https://www.udemy.com/course/unrealblueprint/learn/lecture/15217722#overview
and the lecture after it.

83. Binding your player hud to your player pawn aka creating a reference to bp marine, exposing it as editable, and then feeding it into the bp marine blueprint
https://www.udemy.com/course/unrealblueprint/learn/lecture/15219658#overview This makes use of property / properties bindings / binding.

84. AI navigation and behavior https://www.udemy.com/course/unrealblueprint/learn/lecture/15220396#overview

85. Animation montages https://www.udemy.com/course/unrealblueprint/learn/lecture/15228204#overview

86. Animation montages conveniently goes back to its animation blueprint anim bp when it is finished triggering and playing. No extra code necessary to reset back
to default or normal animations / anim.

87. How to get the animation blueprint / anim bp reference or instance https://www.udemy.com/course/unrealblueprint/learn/lecture/15228204#overview
timestamp 8:00. This is required if you want to check to make sure the animation montage is not already playing. Use "get anim instance" node and "montage is 
playing" pure const function node.

88. Anim notify or animation notifications can be used to call functions while animations or animation montages are playing see
https://www.udemy.com/course/unrealblueprint/learn/lecture/15254630#overview This is very important for spawning sfx / sound effects like footsteps, spawning
particle systems like say bleeding while moving and clutching your player arm, or executing custom code.

89. In unreal's anim notify ui, it's badly designed. You have to mouse over to the right side of the word "track" under anim notifies and click only the spacing
on that line on the timeline. It's very aggravating to bring up the anim notify section.

90. Anim notifies seem to operate independently once you place the anim notify inside the timeline for your animation. No need to hookup the execution pins to other
events in your graph unless you need to do something specific I guess. Simply add the animation anim notify anywhere inside your npc blueprint and call the specific
anim notify event you created inside your called animation montage to execute whatever functions you want to implement such as damage player.

91. Add return node may not be shown in the event graph unless you're looking to add it inside a blue print macro or collapsed function.

92. If you need to call functions or variables from a player character or pawn reference, you need to drag out another reference for the pawn/actor into the animation
blueprint. This is useful if you need to check if your player is alive so you can play the death animation. See
https://www.udemy.com/course/unrealblueprint/learn/lecture/15254630#overview timestamp 13:30

93. Line tracing is the same thing as ray casting / raycasting in unreal engine.

94. To calculate distance between two actors, use linetracebychannel and vector directions / get control rotation. Pretty complex math see
https://www.udemy.com/course/unrealblueprint/learn/lecture/15257124#overview timestamp 4:30

95. Applying line tracing to your gunfire, looping it during auto fire and stopping it when you stop firing https://www.udemy.com/course/unrealblueprint/learn/lecture/15270106#overview
Timestasmp 1:00

96. Blend poses by bool / boolean https://www.udemy.com/course/unrealblueprint/learn/lecture/15270106#overview timestasmp 4:30 Useful for playing animations
when and if an enemy is dead.

97. NOT boolean returns the opposite or false of a bool you create. So if you have a bool that is false, then placing a NOT node after it will make it become true.
Same thing happens if your bool is true then put it through a NOT boolean node, now it becomes FALSE. 
It's kind of confusing so check https://www.udemy.com/course/unrealblueprint/learn/lecture/15270106#overview
timestamp 11:00. It's still not very clear but maybe with time I will get it.

98. Deactivating and disabling alien npcs when they die or as they die and stop spinning towards player as death animation plays bug fix
https://www.udemy.com/course/unrealblueprint/learn/lecture/15270106#overview timestamp 13:30 Use stop movement immediately node to fix

99. Target points have no behavior but can mark areas in your map level https://www.udemy.com/course/unrealblueprint/learn/lecture/15278484#overview
Perfect for creating spawn points or other points of interest.

100. More hud ui tutorials https://www.udemy.com/course/unrealblueprint/learn/lecture/15278484#overview timestamp 4:00

101. AI npc bots that spawn do not have ai controller possession by default https://www.udemy.com/course/unrealblueprint/learn/lecture/15278484#overview
Timestamp 6:23. The fix is easy, go to the npc blueprint like BP_Alien and under class defaults, scroll down to "Pawn" and select auto possess AI.
Choose spawned or placed in world or whatever it is you need.

102. Last array index node and other neat array function call nodes https://www.udemy.com/course/unrealblueprint/learn/lecture/15278484#overview
time 7:00

103. Set timer by function name can call a K2 function or custom event.

104. Decrementing npc ais https://www.udemy.com/course/unrealblueprint/learn/lecture/15302176#questions/13372712 time 0:30

105. AI wave spawning using arrays and checks while limiting how many we spawn https://www.udemy.com/course/unrealblueprint/learn/lecture/15302176#questions/13372712

106. Using actor overlaps to pickup health items or other powerups https://www.udemy.com/course/unrealblueprint/learn/lecture/15478998#questions/9451354 time 7:27
refresher

107. Displaying warning text, such as player leaving mission area https://www.udemy.com/course/unrealblueprint/learn/lecture/15481212#questions/9451354 in the UI
using bindings / bind.

108. 

1. You can enable surface snapping on the editor. You can then drag any actor (object) to snap smoothly to any surface by
dragging its origin point, usually the yellow circle.

2. You may want to turn off surface rotate leaning because if you move a tree for example, it may lean as you drag it around the surface. That doesn't
make sense as trees are always upright, normally.

3. Turns out unreal engine has a bug where it won't compile your new code so you need to hit compile again. To be safe in the future, compile twice. I just had this
bug happen.

4. If you use GetOwner() make sure to remember that if you call it in beginplay() before the actor or object is actually instantiated, you may get a null return value
because it's calling the owner before the owner actually exists.

5. Objects that cast shadows and are moveable should have their mobility properties set to "moveable". Mobility is under "transform" in editor. Failure to do so
will result in shadows that are "left behind" and glitching the look.

6. Editanywhere, uproperty, and visibleanywhere tips https://forums.unrealengine.com/t/how-do-i-expose-a-variable-in-the-editor-and-make-in-editable/1665/6 cannot
use visible or edit in the same line as a rule.

7. Syntax for binding keys to code:
	InputComponent = GetOwner()->FindComponentByClass<UInputComponent>();
	if (InputComponent)
	{
		UE_LOG(LogTemp, Warning, TEXT("Input component found on %s"), *GetOwner()->GetName());
		InputComponent->BindAction("Grab", IE_Pressed, this, &UGrabber::Grab);
	}
	else
	{
		UE_LOG(LogTemp, Error, TEXT("No input component found on object %s"), *GetOwner()->GetName() );
	}
	void UGrabber::Grab()
{
	UE_LOG(LogTemp, Warning, TEXT("Test test grab form ugrabber pressed."));
}
	
Make sure InputComponent is declared in your .header .h header files and you also set the "Grab" in code equal EXACTLY to "Grab" in your unreal editor under:
Project Settings -> Engine -> Input

8. If you're using GetOverlappingActors, make sure the actors/objects that you will check for overlapping with has the tickbox "generate overlapping events" is ticked
yes.

9. When creating a new c++ class from a blueprint, there may be a new issue bug in unreal 4.26 where it cannot find the include. You have to go into the .cpp or .h
(most likely .cpp file) and look at the includes and just trim down the include to say #include "filename.h" instead of "directory/filename.h" easy bug fix.

Afterwards, close everything and start up the project again by clicking the .uproject file and clicking "yes" to rebuilding the project file structure.

10. When adjusting the camera and springarm, consider disabling the "do collision test" to prevent weird clipping or twitching errors in the camera.

11. When changing unreal engine blueprints around, if you're moving and changing inputs and it's not working, be sure to refresh each "node" by right clicking on the
problematic node and select "refresh node". This should also fix variable mismatches.

12. Unreal engine has a very good out of the box 3d sound system with automatic sound drop off and such. This is extremely useful for situations where you need to
hear enemy players based on their distance to you, like in csgo.

13. Unreal engine's 2d sounds are used for sounds whose volume probably won't change, such as leveling up sound, menu sounds, assigning skill point succcesses, etc.

14. Pawns are actors that can be possessed by the player. Characters are specialized pawns that inherits from the pawn class but can do a lot more things like move
or follow navmeshes (for ai). Character pawns are character like, obviously.

15. Might be a good idea to backup any map or level you're working on, and original bug free version and the map you're actually editing. That way if I mess up I can
go back to a previous reference and undo the damage.

16. When making a 3rd person camera, there are a few components you need, such as a camera childed to a spring arm component. See tutorial:
https://www.udemy.com/course/unrealcourse/learn/lecture/20587646#overview

17. An inverse transform vector is a fancy way of saying that vectors come in 2 flavors, local and global. Global is the world position so all objects revolve around
this "global" vector or position in the world when manipulating transforms. Local transforms are specific to the actor or object you're editing where the local actor
or object IS the center of attention when it comes to changing rotation, scaling, or transforms. Inverse transfor vectors means shifting from local to global and
vice versa.

18. To ensure smooth animations, if you tie character movement to the animations, you cannot go faster than the animation speed limit because there are no animations
to represent this faster speed. Hence, this causes a cap on gameplay. If you wish to go faster, you will need animations that will reflect this faster speed.

19. To calculate foot / feet / walk speed in your animations (to fix the foot sliding animation issue) you need to use the formula:
footspeed = (y_finishworldloc - y_startworldloc) / (time_finish - time_start)

20. BlueprintPure is called when the blueprint function isn't really changing; the result is always the same essentially. Generally blueprintpure functions also have
no execution pins.

21. Setting up AI nav meshes for ai bots to follow along a path: https://www.udemy.com/course/unrealcourse/learn/lecture/20628222#announcements

22. AI blackboards and ai behavior trees in unreal engine - artificial intelligence:
https://www.udemy.com/course/unrealcourse/learn/lecture/20628262#announcements

23. In blackboard behavior tree AI artificial intelligence, there can only be 1 root node.

24. Using bt (behavior trees) ai in blackboard unreal engine https://www.udemy.com/course/unrealcourse/learn/lecture/20628280#announcements with conditionals
and decorators.

25. When creating custom C++ btt tasks, there's a link error bug, you can resolve by looking for projectname.build.cs and add "GameplayTasks" see:
https://www.udemy.com/course/unrealcourse/learn/lecture/20628300#announcements timestamp 4:27 example line you're looking for is:

PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "GameplayTasks" });

This is a bug resulting from overriding the btt task function in unreal and for some reason unreal forgets to add the "GameplayTasks" parameter.

26. Be sure to check "Observe blackboard value" so that the node behavior will keep updating everytime the player or something else the bttask is changed. This will
make sure the ai, for example, keeps moving towards the target or player instead of going to a last known location then chasing you (which looks weird and unnatural).
see https://www.udemy.com/course/unrealcourse/learn/lecture/20628318#announcements

27. BTTservices tutorial https://www.udemy.com/course/unrealcourse/learn/lecture/20628352#announcements

28. Fixing weird bugs like shooting and hitting yourself or own gun, disabling collision when actor is dead (disabling collision models after actor died), and stopping
the shooting of an npc gun after he died https://www.udemy.com/course/unrealcourse/learn/lecture/20628404#announcements

29. Sound wave sound base unreal tutorial https://www.udemy.com/course/unrealcourse/learn/lecture/20648108#announcements important if you want to modify sound effects.

30. Sound spatialization tutorial sounds effects louder or quieter based on distance etc https://www.udemy.com/course/unrealcourse/learn/lecture/20648154#announcements

31. Aim offsets or getting your character mesh to move their arms up and down as you aim up or down using unreal engine blueprints tutorial
https://www.udemy.com/course/unrealcourse/learn/lecture/20648208#announcements

32. Animation state machines and complex state machines https://www.udemy.com/course/unrealcourse/learn/lecture/20648218#announcements and the one after.

33. Adding music and introduction text https://www.udemy.com/course/unrealcourse/learn/lecture/20648252#announcements

34. Levels are basically scenes from unity 3d.

35. 1 unreal unit is = 1 centimeter cm

36. You can break nodes manually and selectively in unreal blueprints by holding left alt key and left clicking on the node you wish to break.

37. When you place an input blueprint node, you can uncheck "consume input" so pressing say, the w key, will play all actions. Useful if you want to display
messages while doing an action and moving at the same time probably.

38. Getting and setting actor rotations using + and * operators in unreal blueprints https://www.udemy.com/course/unrealblueprint/learn/lecture/12396166#overview
A good way to fix odd behavior problems. This also goes over how to limit rotation values using math f clamps.

39. If selecting multiple objects and you want ot adjust the pivot point when rotating it later as a static mesh, find the center pivot point you want and select that
object/actor last https://www.udemy.com/course/unrealblueprint/learn/lecture/12454578#overview

40. Combining floats, text, and other strings to display a winning message tutorial https://www.udemy.com/course/unrealblueprint/learn/lecture/12454676#overview

41. To add comments on blueprint nodes, select all the nodes you want to place a comment on then press the "C" key.

42. Auto exposure can be turned off (it is on by default) so that lights will not dim or get brighter the further or closer away the source lighting is. See
https://www.udemy.com/course/unrealblueprint/learn/lecture/12960452#overview

43. Camera bobbing and follow the pawn (3rd person camera) tutorial: https://www.udemy.com/course/unrealblueprint/learn/lecture/13369792#overview Set world rotation
and set the pivot/center point of the camera spring arm to the dead center of the object or actor.

44. Using torque and other inputs to move your character or actor properly https://www.udemy.com/course/unrealblueprint/learn/lecture/13488102#overview this explains
how the torque is applied to axis or rotation, NOT the direction you're thinking of initially.

45. Magic numbers are numbers that used without an example or meaning of what they actually represent.

46. Can select any area and right click on it, then at the near bottom of the popup menu, select "play from here" so you don't have to play through the whole level to
test your level out https://www.udemy.com/course/unrealblueprint/learn/lecture/13637654#overview

47. Springarms can collide with other platforms when you may not want it to, it is due to the collision setting, see https://www.udemy.com/course/unrealblueprint/learn/lecture/13637654#overview
for fix. Simply disable "collision test" in collision settings for the spring arm.

48. Using booleans, custom box trigger blueprints, and branches etc to detect player pawns or objects entering a certain area 
https://www.udemy.com/course/unrealblueprint/learn/lecture/13689856#overview

49. You can use breakpoints on branches to test your box trigger during simulated play. If triggered condition is met, it will immediatley jump to the breakpointed
node in your blueprint to let you know indeed your trigger volume is working, see https://www.udemy.com/course/unrealblueprint/learn/lecture/13689856#overview

50. 

1. Order of functions written matter. Compiler reads from top to bottom so if a function(A) needs to call another function(B), function (B) must be above function (A).
Talk about thinking in reverse. Yikes.

2. To skip lines in printing, use either:

std::cout << "Some text displayed here" << std::endl; //(messy and long)
or:
std::cout << "Some text displayed here \n";

3.         std::cin.clear(); //clear alphanumeric errors
        std::cin.ignore(); //clear weird character/symbol errors
Funny enough, we may not need these as unreal apparently takes care of this automatically.

4. can set boolean variables equal to a function that returns a bool to determine when a while loop remains true or false or vice versa:
while(true)
    {
        bool bLevelComplete = PlayGame();
    }
    
5. Variables have scope or limits to a local function or where it is declared. TO get around this, you need to pass these variables into the arguments
of function calls that will take that variable and data type.

6. Unreal engine's own C++ requires that we include TEXT() macros to ensure that our strings are read by different build platforms.
Usage:
FString HiddenWord = TEXT("nuts");

7. 
